<?php

// Sidora Analysis API for Islandora
// file: sianis.module
// author: Gert Schmeltz Pedersen gertsp45@gmail.com

	function sianis_init() {
//    drupal_set_message(t('sianis_init'));
		drupal_add_css(drupal_get_path('module', 'sianis').'/sianis.css');
		drupal_add_js(drupal_get_path('module', 'sianis').'/sianis.js');
	}
   
	function sianis_perm() {
		return array('Sidora Analysis API for Islandora', 'Administer sianis');
	}
   

	function sianis_menu() {
		$items = array();
		$items['sianis'] = array(
			'page callback' => 'sianis',
			'access arguments' => array('Sidora Analysis API for Islandora'),
			'type' => MENU_CALLBACK,
		);
		$items['admin/settings/sianis'] = array(
			'title' => 'sianis Settings',
			'description' => 'sianis Settings',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('sianis_settings'),
			'access arguments' => array('Administer sianis'),
		);
		return $items;
	}

	function sianis_block($op = 'list', $delta = 0, $edit = array()) {
		switch ($op) {
			case 'list':
				$blocks[0] = array(
				'info' => t('sianis Block'),
				);
				return $blocks;
			case 'configure':
				$form = array();
				switch ($delta) {
					case 0:
						$form['sianis_block_fedora']=array(
							'#type' => 'textfield',
							'#title' => t('The url of fedora'),
							'#size' => 75,
							'#description' => t('The url of fedora.'),
							'#default_value' => variable_get('sianis_block_fedora', t('http://127.0.0.1:8080/fedora')),
						);
						$form['sianis_block_fedora_userpass']=array(
							'#type' => 'textfield',
							'#title' => t('The username:password at fedora'),
							'#size' => 75,
							'#description' => t('The username:password at fedora.'),
							'#default_value' => variable_get('sianis_block_fedora_userpass', t('sianisuseroffedora:sianisuseroffedorapassword')),
						);
						$form['sianis_block_gsearch']=array(
							'#type' => 'textfield',
							'#title' => t('The url of gsearch'),
							'#size' => 75,
							'#description' => t('The url of gsearch.'),
							'#default_value' => variable_get('sianis_block_gsearch', t('http://127.0.0.1:8080/fedoragsearch/rest')),
						);
						$form['sianis_block_solr']=array(
							'#type' => 'textfield',
							'#title' => t('The url of the solr server'),
							'#size' => 75,
							'#description' => t('The url of the solr server.'),
							'#default_value' => variable_get('sianis_block_solr', t('http://127.0.0.1:8080/solr/gsearch_solr')),
						);
						$form['sianis_block_solr_max']=array(
							'#type' => 'textfield',
							'#title' => t('The maximum number of rows in the solr query results'),
							'#size' => 10,
							'#description' => t('The maximum number of rows in the solr query results.'),
							'#default_value' => variable_get('sianis_block_solr_max', t('1000')),
						);
						$form['sianis_block_solr_xslt_tree']=array(
							'#type' => 'textfield',
							'#title' => t('The default stylesheet file name for the project tree structure'),
							'#size' => 75,
							'#description' => t('The default stylesheet file name for the project tree structure.'),
							'#default_value' => variable_get('sianis_block_solr_xslt_tree', t('sianisProjectStructureToHtml.xslt')),
						);
						$form['sianis_block_solr_xslt_filtered']=array(
							'#type' => 'textfield',
							'#title' => t('The default stylesheet file name for the filtered observation tables'),
							'#size' => 75,
							'#description' => t('The default stylesheet file name for the filtered observation tables.'),
							'#default_value' => variable_get('sianis_block_solr_xslt_filtered', t('sianisObstablesToHtml.xslt')),
						);
						break;
				}
				return $form;
			case 'save':
				switch ($delta) {
					case 0:
						variable_set('sianis_block_fedora', $edit['sianis_block_fedora']);
						variable_set('sianis_block_fedora_userpass', $edit['sianis_block_fedora_userpass']);
						variable_set('sianis_block_gsearch', $edit['sianis_block_gsearch']);
						variable_set('sianis_block_solr', $edit['sianis_block_solr']);
						variable_set('sianis_block_solr_max', $edit['sianis_block_solr_max']);
						variable_set('sianis_block_solr_xslt_tree', $edit['sianis_block_solr_xslt_tree']);
						variable_set('sianis_block_solr_xslt_filtered', $edit['sianis_block_solr_xslt_filtered']);
						break;
				}
			case 'view': default:
				case 0:
					$block['subject'] = t('Sidora Analysis API for Islandora block');
					$block['content'] = sianis_get_block();
					break;
		}
		return $block;
	}

	function sianis_theme() {
		return array(
			'sianis_block_form' => array(
				'arguments' => array (
				'form' => NULL,
				),
			),
		);
	}

	function sianis_get_block() {
		global $user;
	 	$datestamp = date('Y-m-d H:i:s');
 		$logdatestamp = date('Y-m-d');
		$logfp = fopen('/tmp/sianis-' . $logdatestamp . '.log', 'a');
		fwrite($logfp, "\n\n[$datestamp] $user->name sianisBlock.html");
		fclose($logfp);
		return file_get_contents(drupal_get_path('module', 'sianis') . '/sianisBlock.html');
	}

	function sianis($op, $arg1=null, $arg2=null, $arg3=null, $arg4=null, $arg5=null, $arg6=null, $arg7=null, $arg8=null, $arg9=null) {
		module_load_include('inc', 'sianis', 'SIANIS');
		$sianisClass = new SIANIS();
		if ($op == 'sianisGetProjectStructure') {
			$workflowResult = $sianisClass->sianisGetProjectStructure($arg1, $arg2);
			return $workflowResult;
		}
		if ($op == 'sianisGetSpecies') {
			$workflowResult = $sianisClass->sianisGetSpecies($arg1, $arg2);
			return $workflowResult;
		}
		if ($op == 'sianisSelectObstables') {
			$workflowResult = $sianisClass->sianisSelectObstables($arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7, $arg8, $arg9);
			return $workflowResult;
		}
	}

	function sianis_settings() { 
		return system_settings_form($form); 
	}
